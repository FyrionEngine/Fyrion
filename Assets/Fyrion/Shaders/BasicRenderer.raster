struct VSInput
{
     float3 position  : POSITION0;
     float3 normal    : NORMAL1;
     float3 color     : COLOR2;
     float2 uv        : UV2;
     float4 tangent   : TANGENT1;
};

struct VSOutput
{
	float4 pos      : SV_POSITION;
	float3 fragPos  : POSITION0;
	float2 uv       : TEXCOORD0;
};

struct PushConsts
{
	float4x4 model;
};


struct Scene
{
  float4x4 viewProjection;
};

[[vk::binding(0, 0)]]  ConstantBuffer<Scene> scene;
[[vk::push_constant]]  ConstantBuffer<PushConsts>  pushConsts;

VSOutput MainVS(VSInput input)
{
	VSOutput output = (VSOutput)0;
	output.fragPos    = (float3)mul(pushConsts.model, float4(input.position, 1.0));
	output.pos        = mul(scene.viewProjection, float4(output.fragPos, 1.0));
	output.uv         = input.uv;
	return output;
}

Texture2D texture;
SamplerState samplerState;

float4 MainPS(VSOutput input) : SV_TARGET
{
	return texture.Sample(samplerState, input.uv);
}