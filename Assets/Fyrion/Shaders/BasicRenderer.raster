struct VSInput
{
     float3 position  : POSITION0;
     float3 normal    : NORMAL1;
     float3 color     : COLOR2;
     float2 uv        : UV2;
     float4 tangent   : TANGENT1;
};

struct VSOutput
{
	float4 pos      : SV_POSITION;
	float3 fragPos  : POSITION0;
    float3 color    : COLOR0;
	float2 uv       : TEXCOORD0;
	float3 normal   : NORMAL1;
    float4 tangent  : TANGENT1;
};

struct PushConsts
{
	float4x4 model;
};

struct Scene
{
    float4x4 viewProjection;
};

ConstantBuffer<Scene> scene : register(b0);
[[vk::push_constant]]  ConstantBuffer<PushConsts>  pushConsts;

VSOutput MainVS(VSInput input)
{
	VSOutput output = (VSOutput)0;
    output.fragPos    = (float3)mul(pushConsts.model, float4(input.position, 1.0));
    output.color      = input.color;
	output.pos        = mul(scene.viewProjection, float4(output.fragPos, 1.0));
	output.uv         = input.uv;

	float3x3 normalMat = (float3x3)pushConsts.model;
	output.normal      = normalize(mul(normalMat, input.normal));
    output.tangent     = float4(normalize(mul(normalMat, input.tangent.xyz)), input.tangent.w);

	return output;
}

struct Material
{
    float4 baseColorAlphaCutOff;
};

ConstantBuffer<Material> material   : register(b0, space1);

Texture2D       texture : register(t1, space1);
SamplerState    baseColorSampler : register(s2, space1);

float4 MainPS(VSOutput input) : SV_TARGET
{
    float3 baseColor    = material.baseColorAlphaCutOff.rgb;
    float alphaCutOff   = material.baseColorAlphaCutOff.a;

    float4 color = texture.Sample(baseColorSampler, input.uv) * float4(baseColor, 1.0);
    if (color.a < alphaCutOff)
    {
        discard;
    }
	return color;
}


