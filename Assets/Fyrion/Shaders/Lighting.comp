#include "Fyrion://Shaders/Includes/PBR.inc"


struct LightingData
{
    float4x4 viewInverse;
    float4x4 projInverse;

    float4   skyColor;
};

Texture2D               gbufferColorMetallic    : register(t0);
Texture2D               gbufferNormalRoughness  : register(t1);

Texture2D<float>        depthTex                : register(t2);
Texture2D               sky                     : register(t3);
RWTexture2D<float4>     lightColor              : register(u4);
SamplerState            samplerState            : register(s5);
TextureCube<float4>     diffuseIrradiance       : register(t6);

ConstantBuffer<LightingData> data               : register(b7);


float2 SampleSphericalMap(float3 v)
{
    const float2 invAtan = float2(0.1591, 0.3183);
    float2 uv = float2(atan2(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
    uv *= -1.0;
    return uv;
}

[numthreads(16, 16, 1)]
void MainCS(in uint2 px : SV_DispatchThreadID)
{
    float2 screenSize;
    lightColor.GetDimensions(screenSize.x, screenSize.y);

    const float2 uv = (float2(px) + 0.5) / screenSize;
    const float depth = depthTex[px];

    if (depth == 1.0)
    {
        float2 d            = uv * 2.0 - 1.0;
        float4 target       = mul(data.projInverse, float4(d.x, d.y * -1.0, 1, 1));
        float4 direction    = mul(data.viewInverse, float4(normalize(target.xyz), 0));

        float3 output = sky.SampleLevel(samplerState, SampleSphericalMap(direction.xyz), 0).rgb * data.skyColor.rgb;
        lightColor[px] = float4(output, 1.0);

        return;
    }

    float3 baseColor    = gbufferColorMetallic[px].xyz;
    float3 normal       = gbufferNormalRoughness[px].rgb;

    float3 indirectLight = 0.0;

    float3 irradiance = diffuseIrradiance.Sample(samplerState, normal).rgb;

    indirectLight = baseColor * (irradiance * 3.0);
    indirectLight = indirectLight * 1.0 / PI;

    float3 finalColor = indirectLight;
    lightColor[px] = float4(finalColor, 1.0);
}