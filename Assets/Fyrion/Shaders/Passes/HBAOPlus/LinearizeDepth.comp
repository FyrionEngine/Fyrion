#include "Fyrion://Shaders/Passes/HBAOPlus/SharedDefs.inc"

Texture2D<float>                    depthTextureInput0   : register(t0);
Texture2D<float>                    depthTextureInput1   : register(t1);
RWTexture2D<float>                  depthTextureOutput0  : register(u2);
RWTexture2D<float>                  depthTextureOutput1  : register(u3);

float ConvertToViewDepth(float hardwareDepth)
{
    float normalizedDepth = saturate(hbao.inverseDepthRangeA * hardwareDepth + hbao.inverseDepthRangeB);
    return 1.0 / (normalizedDepth * hbao.linearizeDepthA + hbao.linearizeDepthB);
}

[numthreads(16, 16, 1)]
void MainCS(in uint2 px : SV_DispatchThreadID)
{
    float hardwareDepth0     = depthTextureInput0.Load(int3(px.xy, 0));
    float hardwareDepth1     = depthTextureInput1.Load(int3(px.xy, 0));

    float viewDepth0 =  ConvertToViewDepth(hardwareDepth0);
    float viewDepth1 =  ConvertToViewDepth(hardwareDepth1);

    depthTextureOutput0[px] = min(viewDepth0, viewDepth1);
    depthTextureOutput1[px] = max(viewDepth0, viewDepth1);
}