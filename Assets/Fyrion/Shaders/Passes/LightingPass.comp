#include "Fyrion://Shaders/Includes/PBR.inc"

#define SHADOW_MAP_CASCADE_COUNT 4
#define FY_CASCADE_DEBUG 0

struct DirectionalLight
{
	float4 direction;
	float4 color;
	float4 intensityIndirect;
};

struct LightingData
{
	float4              cascadeSplits;
	float4x4            cascadeViewProjMat[SHADOW_MAP_CASCADE_COUNT];
    float4              viewPos;
    float4x4            view;
    DirectionalLight    directionalLight[4];
    uint4               lightCount;
};

Texture2D               gbufferColorMetallic    : register(t0);
Texture2D               gbufferNormalRoughness  : register(t1);
Texture2D               gBufferPositionAO       : register(t2);

Texture2D<float>        depthTex                : register(t3);
RWTexture2D<float4>     lightColor              : register(u4);
SamplerState            samplerState            : register(s5);
TextureCube<float4>     diffuseIrradiance       : register(t6);
Texture2D               brdfLUT                 : register(t7);
SamplerState            brdfLUTSampler          : register(s8);
TextureCube<float4>     specularMap             : register(t9);
Texture2DArray          shadowMapTexture        : register(t10);
SamplerState            shadowMapSampler        : register(s11);
ConstantBuffer<LightingData> data               : register(b12);

uint QuerySpecularTextureLevels()
{
	uint width, height, levels;
	specularMap.GetDimensions(0, width, height, levels);
	return levels;
}


//TODO move
static const float4x4 biasMat = float4x4(
	0.5, 0.0, 0.0, 0.5,
	0.0, 0.5, 0.0, 0.5,
	0.0, 0.0, 1.0, 0.0,
	0.0, 0.0, 0.0, 1.0
);

float textureProj(float4 shadowCoord, float2 offset, uint cascadeIndex)
{
	float shadow = 1.0;
	float bias = 0.0005;

	if ( shadowCoord.z > -1.0 && shadowCoord.z < 1.0 ) {
		float dist = shadowMapTexture.Sample(shadowMapSampler, float3(shadowCoord.xy + offset, cascadeIndex)).r;
		if (shadowCoord.w > 0 && dist < shadowCoord.z - bias) {
			shadow = 0.0;
		}
	}
	return shadow;
}

float filterPCF(float4 sc, uint cascadeIndex)
{
	int3 texDim;
	shadowMapTexture.GetDimensions(texDim.x, texDim.y, texDim.z);
	float scale = 0.75;
	float dx = scale * 1.0 / float(texDim.x);
	float dy = scale * 1.0 / float(texDim.y);

	float shadowFactor = 0.0;
	int count = 0;
	int range = 3;

	for (int x = -range; x <= range; x++) {
		for (int y = -range; y <= range; y++) {
			shadowFactor += textureProj(sc, float2(dx*x, dy*y), cascadeIndex);
			count++;
		}
	}
	return shadowFactor / count;
}
//TODO move end


[numthreads(16, 16, 1)]
void MainCS(in uint2 px : SV_DispatchThreadID)
{
    const float depth   = depthTex[px];
    if (depth == 1.0)
    {
        lightColor[px] = float4(0.0, 0.0, 0.0, 1.0);
        return;
    }

    float3  baseColor   = gbufferColorMetallic[px].rgb;
    float3  N           = gbufferNormalRoughness[px].rgb;
    float   metallic    = gbufferColorMetallic[px].a;
    float   roughness   = gbufferNormalRoughness[px].a;
    float3  fragPos     = gBufferPositionAO[px].xyz;
    float3  ao          = gBufferPositionAO[px].a;

    float3  fragViewPos  = mul(data.view, float4(fragPos, 1.0)).xyz;

    uint cascadeIndex = 0;
    for(uint i = 0; i < SHADOW_MAP_CASCADE_COUNT - 1; ++i)
    {
        if(fragViewPos.z < data.cascadeSplits[i])
        {
            cascadeIndex = i + 1;
        }
    }

    // Depth compare for shadowing
    float4 shadowCoord = mul(biasMat, mul(data.cascadeViewProjMat[cascadeIndex], float4(fragPos, 1.0)));
    float  shadow = filterPCF(shadowCoord / shadowCoord.w, cascadeIndex);

	float3 V    = normalize(data.viewPos.xyz - fragPos);
	float cosLo = max(dot(N, V), 0.0);

	float3 Lr   = 2.0 * cosLo * N - V;

    float3 F0 = 0.04;
    F0 = lerp(F0, baseColor, metallic);

    float3 directLightColor = 0.0;
    float indirectMultiplier = 1.0;

    //direct light
    if (data.lightCount.x > 0)
    {
        DirectionalLight light = data.directionalLight[0];
        indirectMultiplier = light.intensityIndirect.y;

        float3 L = normalize(light.direction.xyz);
        float3 H = normalize(V + L);

        // Cook-Torrance BRDF
        float  NDF  = DistributionGGX(N, H, roughness);
        float  G    = GeometrySmith(N, V, L, roughness);
        float3 F    = FresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);

        float3 numerator    = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
        float3 specular = numerator / denominator;

        float3 kD = 1.0 - F;
        kD *= 1.0 - metallic;
        float NdotL = max(dot(N, L), 0.0);

        float3 directLight = (kD * (baseColor / PI) + specular) * light.intensityIndirect.x * NdotL;
        directLightColor += directLight;
        directLightColor *= shadow;
    }

    float3 indirectLight = 0.0;

    //indirect light
    {
        float3 irradiance = diffuseIrradiance.Sample(samplerState, N).rgb;

        float3 F = FresnelSchlickRoughness(cosLo, F0, 1.0);
        float3 kd = lerp(1.0 - F, 0.0, metallic);

        //diffuse irradiance
        float3 diffuseIBL = kd * baseColor * irradiance;

        //specular
        uint    specularTextureLevels   = QuerySpecularTextureLevels();
        float3  specularIrradiance      = specularMap.SampleLevel(samplerState, Lr, roughness * specularTextureLevels).rgb;

        float2  specularBRDF            = brdfLUT.SampleLevel(brdfLUTSampler, float2(cosLo, roughness), 0).rg;
        float3  specularIBL             = specularIrradiance * (F0 * specularBRDF.x + specularBRDF.y);

        indirectLight = diffuseIBL + specularIBL;
        indirectLight *= indirectMultiplier;
    }

    lightColor[px] = float4(directLightColor + indirectLight, 1.0);


#if FY_CASCADE_DEBUG

    switch(cascadeIndex) {
        case 0 :
            lightColor[px].rgb *= float3(1.0f, 0.25f, 0.25f);
            break;
        case 1 :
            lightColor[px].rgb *= float3(0.25f, 1.0f, 0.25f);
            break;
        case 2 :
            lightColor[px].rgb *= float3(0.25f, 0.25f, 1.0f);
            break;
        case 3 :
            lightColor[px].rgb *= float3(1.0f, 1.0f, 0.25f);
            break;
    }
#endif
}