#define SSAO_KERNEL_ARRAY_SIZE 64
#define SSAO_KERNEL_SIZE 64
#define SSAO_RADIUS 0.3

struct UBOSSAOKernel
{
	float4 samples[SSAO_KERNEL_ARRAY_SIZE];
};

struct PushConst
{
	float4x4 projection;
	float4x4 view;
	float4x4 projInv;
};

Texture2D           position                : register(t0);
Texture2D           textureNormal           : register(t1);
Texture2D           ssaoNoiseTexture        : register(t2);
SamplerState        ssaoNoiseSampler        : register(s3);
RWTexture2D<float>  ssaoTexture             : register(u4);


ConstantBuffer<UBOSSAOKernel>  uboSSAOKernel: register(b5);
SamplerState                   colorSampler : register(s7);

[[vk::push_constant]] PushConst pushConst;


//float3 ReconstructVSPosFromDepth(float2 uv)
//{
////    float depth =  depthTexture.SampleLevel(colorSampler, uv, 1.0).r;
////    float x = uv.x * 2.0 - 1.0;
////    float y = (1.0 - uv.y) * 2.0 - 1.0;
////    float4 pos = float4(x, y, depth, 1.0);
////    float4 posVS = mul(pushConst.projInv, pos);
////    return posVS.xyz / posVS.w;
//
////    float depth =  depthTexture.SampleLevel(colorSampler, uv, 1.0).r;
////    return float3(uv, depth);
//
//    return 0.0;
//}

[numthreads(16, 16, 1)]
void MainCS(in uint2 px : SV_DispatchThreadID)
{
	int2 outDim;
	ssaoTexture.GetDimensions(outDim.x, outDim.y);
    const float2 uv = (float2(px) + 0.5) / outDim.xy;

    // Get G-Buffer values
	//float3 fragPos = ReconstructVSPosFromDepth(uv);

	float3 fragPos =  mul(pushConst.view, float4(position.SampleLevel(colorSampler, uv, 0.0).rgb, 1.0)).xyz;
	float3 normal  =  normalize(mul((float3x3)pushConst.view,textureNormal.SampleLevel(colorSampler,  uv, 1.0).xyz) * 2.0 - 1.0);

	// Get a random vector using a noise lookup
	int2 texDim;
	position.GetDimensions(texDim.x, texDim.y);
	int2 noiseDim;
	ssaoNoiseTexture.GetDimensions(noiseDim.x, noiseDim.y);

	const float2 noiseUV = float2(float(texDim.x)/float(noiseDim.x), float(texDim.y)/(noiseDim.y)) * uv;
	float3 randomVec     = normalize(ssaoNoiseTexture.SampleLevel(ssaoNoiseSampler, noiseUV, 1.0).xyz * 2.0 - 1.0);

	// Create TBN matrix
	float3 tangent      = normalize(randomVec - normal * dot(randomVec, normal));
	float3 bitangent    = cross(tangent, normal);
	float3x3 TBN        = transpose(float3x3(tangent, bitangent, normal));

	// Calculate occlusion value
	float bias = 0.025;
	float occlusion = 0.0f;
	for(int i = 0; i < SSAO_KERNEL_SIZE; i++)
	{
		float3 sample = mul(TBN, uboSSAOKernel.samples[i].xyz);
		sample = sample * SSAO_RADIUS + fragPos;

		// project
		float4 offset = float4(sample, 1.0f);
		offset = mul(pushConst.projection, offset);
		offset.xyz /= offset.w;
		offset.xyz = offset.xyz * 0.5f + 0.5f;
        offset.y = 1.0 - offset.y;

        //float sampleDepth = ReconstructVSPosFromDepth(offset.xy).z;
        //float sampleDepth =  position.SampleLevel(colorSampler, offset.xy, 0.0).z;
        float sampleDepth =  mul(pushConst.view, float4(position.SampleLevel(colorSampler, offset.xy, 0.0).xyz, 1.0)).z;

		float rangeCheck = smoothstep(0.0f, 1.0f, SSAO_RADIUS / abs(fragPos.z - sampleDepth));
		occlusion += (sampleDepth >= sample.z + bias ? 1.0f : 0.0f) * rangeCheck;
	}
	ssaoTexture[px] = 1.0 - (occlusion / float(SSAO_KERNEL_SIZE));
}