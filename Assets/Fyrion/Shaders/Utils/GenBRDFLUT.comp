#include "Fyrion://Shaders/Includes/PBR.inc"

RWTexture2D<float2> texture : register(u0);

static const uint   NumSamples = 1024;
static const float  InvNumSamples = 1.0 / float(NumSamples);

float2 SampleHammersley(uint i)
{
	return float2(i * InvNumSamples, RadicalInverseVDC(i));
}


float2 IntegrateBRDF(float cosLo, float roughness)
{
	float3 Lo = float3(sqrt(1.0 - cosLo*cosLo), 0.0, cosLo);

	float DFG1 = 0;
	float DFG2 = 0;


	float3 N = float3(0.0, 0.0, 1.0);

	for(uint i=0; i<NumSamples; ++i)
	{
		float2 u = SampleHammersley(i);

		// Sample directly in tangent/shading space since we don't care about reference frame as long as it's consistent.
		float3 Lh = ImportanceSampleGGX(u, N, roughness);

		// Compute incident direction (Li) by reflecting viewing direction (Lo) around half-vector (Lh).
		float3 Li = normalize(2.0 * dot(Lo, Lh) * Lh - Lo);

		float cosLi   = max(Li.z, 0.0);
		float cosLh   = max(Lh.z, 0.0);
		float cosLoLh = max(dot(Lo, Lh), 0.0);

		if(cosLi > 0.0)
		{
			float G  = GeometrySmith(N, cosLi, cosLo, roughness);
			float Gv = G * cosLoLh / (cosLh * cosLo);
			float Fc = pow(1.0 - cosLoLh, 5);

			DFG1 += (1 - Fc) * Gv;
			DFG2 += Fc * Gv;
		}
	}

	return float2(DFG1, DFG2) * InvNumSamples;
}

[numthreads(32, 32, 1)]
void MainCS(uint2 threadID : SV_DispatchthreadID)
{
	float outputWidth, outputHeight;
	texture.GetDimensions(outputWidth, outputHeight);

    float cosLo         = threadID.x / outputWidth;
    float roughness     = threadID.y / outputHeight;

    cosLo = max(cosLo, Epsilon);
    texture[threadID] = IntegrateBRDF(cosLo, roughness);
}